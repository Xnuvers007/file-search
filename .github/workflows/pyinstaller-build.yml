name: PyInstaller Build and Release

on:
  push:
    tags:
      - "V*"
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: 1. Checkout repository
        uses: actions/checkout@v4

      - name: 2. Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: 3. Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller scikit-learn pymupdf

      - name: 4. Extract version from tag
        id: get_version
        shell: bash
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      # âœ… UPX setup: Windows & Linux via crazy-max
      - name: 5a. Setup UPX for Windows/Linux
        if: matrix.os != 'macos-latest'
        uses: crazy-max/ghaction-upx@v3
        with:
          version: latest

      # âœ… UPX setup: macOS via brew
      - name: 5b. Install UPX on macOS
        if: matrix.os == 'macos-latest'
        run: brew install upx

      - name: 6. Generate .spec file
        shell: bash
        run: |
          cat << 'EOF' > main.spec
          # -*- mode: python ; coding: utf-8 -*-
          a = Analysis(
              ['main.py'],
              pathex=[],
              binaries=[],
              datas=[
                  ('app', 'app'),
                  ('assets', 'assets')
              ],
              hiddenimports=[
                  'pandas._libs.tslibs.base',
                  'pandas._libs.tslibs.np_datetime',
                  'pandas._libs.tslibs.timedeltas',
                  'matplotlib.backends.backend_tkagg',
                  'sklearn.utils._cython_blas',
                  'PIL._tkinter_finder',
                  'pymupdf.core'
              ],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=['pytest', 'doctest', 'unittest', 'PyQt5', 'PyQt6', 'wx'],
              noarchive=False,
          )
          pyz = PYZ(a.pure, a.zipped_data, cipher=None)

          exe = EXE(
              pyz,
              a.scripts,
              [],
              exclude_binaries=True,
              name='FileSearchPro',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=True,
              runtime_tmpdir=None,
              console=False,
              icon='assets/search_icon.ico',
          )

          coll = COLLECT(
              exe,
              a.binaries,
              a.zipfiles,
              a.datas,
              strip=False,
              upx=True,
              name='FileSearchPro'
          )
          EOF

      - name: 7. Build executable with PyInstaller using UPX
        run: pyinstaller --noconfirm --clean --upx-dir=/usr/local/bin main.spec

      - name: 8. Rename output file
        shell: bash
        run: |
          VERSION="${{ env.VERSION }}"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ARTIFACT_NAME="File-Search-Pro-v${VERSION}-Windows-x64.exe"
            mv dist/FileSearchPro.exe "dist/$ARTIFACT_NAME"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            ARTIFACT_NAME="File-Search-Pro-v${VERSION}-macOS"
            mv dist/FileSearchPro "dist/$ARTIFACT_NAME"
          else
            ARTIFACT_NAME="File-Search-Pro-v${VERSION}-Linux-x64"
            mv dist/FileSearchPro "dist/$ARTIFACT_NAME"
          fi
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

      - name: 9. Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: dist/${{ env.ARTIFACT_NAME }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create GitHub release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ðŸŽ‰ New release of **File Content Search Pro**
            
            âœ… Built with PyInstaller  
            âœ… UPX compression enabled for all OS  
            âœ… Windows, macOS, and Linux supported
            
            Download the appropriate version below.
          files: artifacts/*/*
